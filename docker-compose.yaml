version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: cumock-postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cumock-network
  
  redis:
    image: redis:7
    container_name: cumock-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cumock-network
  
  backend:
    build: ./cumock_backend
    container_name: cumock-backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    networks:
      - cumock-network
  
  frontend:
    build: 
      context: ./cumock_frontend
      args:
        - API_HOST=${HOST}
    container_name: cumock-frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - cumock-network

networks:
  cumock-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: